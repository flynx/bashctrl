#!/usr/bin/bash
#----------------------------------------------------------------------
#
# Bash control script...
#
# Originally created in the late 90s to early 2Ks by Alex A. Naanou.
#
#
#----------------------------------------------------------------------
# base configuration...

# NOTE: these are overloadable...
# NOTE: spaces in file/dir names are not so good here, avoid if you can =)
[ -z $BASH_DIR ] \
	&& BASH_DIR=~/.bash/
[ -z $BIN_DIR ] \
	&& BIN_DIR=~/bin/


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

DEFAULT_PLUGINS=(
	"alias 50 login"
	"alias 50 start"
	"alias 50 end"
	"alias 50 logout"

	"prompt 50 start"
)

DISABLED_PLUGINS=(
	"bindings 50 login"
	"bindings 50 start"

	"ssh-agent 50 login"

	"bash_completion 99 login"
	"bash_completion 99 start"

	"env 50 start"

	"bin 90 start"
)



#----------------------------------------------------------------------

SCRIPT=`basename $0`

function printhelp(){ cat << EOF
Bash control script

Usage::
  $SCRIPT COMMAND [ARGS]

supported commands:
  -h|--help|help  - print this message and exit.

  -l|list         - list events and installed plugins.
  -e|events       - list supported events.
  -p|plugins      - list available plugins.
  -s|script       - list the plugins in a runnable bash script format.

  add PLUGIN PRIO EVT
                  - install PLUGIN to EVT with PRIO.
                    if a plugin is already installed, change its settings.
                    NOTE: use a two digit priority (arbitary digit prios
                          are not supported by some commands).
  del PLUGIN EVT|all
                  - remove PLUGIN from EVT.
                    if "all" is given, remove from all events.

  setup           - setup bashctrl directories and defaults.

  run EVENT       - run event scripts

EOF
}


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# handle arguments...

if [ -z $1 ]; then
	printhelp
	exit	
fi

while true; do
	if [ -z $1 ]; then
		break
	fi
	case $1 in
		-h|--help|help)
			printhelp
			break
			;;
		-l|list)
			echo installed plugins:
			for event in ${BASH_DIR}/events/* ; do
				[ -f $event ] \
					&& continue
				echo "    `basename ${event}`"
				for plugin in ${event}/* ; do
					plugin=`basename $plugin`
					( [ "$plugin" == "*" ] \
							|| [ $plugin == "README" ] ) \
						&& continue
					echo "        $plugin"
				done
			done
			break
			;;
		-e|events)
			echo supported events:
			for event in ${BASH_DIR}/events/* ; do
				[ -f $event ] \
					&& continue
				echo "    `basename ${event}`"
				[ -e ${event}/README ] \
					&& cat ${event}/README \
					&& echo
			done
			break
			;;
		-p|plugins)
			echo available plugins:
			for plugin in ${BASH_DIR}/plugins/* ; do
				plugin=`basename $plugin`
				[ $plugin == "README" ] \
					&& continue
				echo "    ${plugin}"
			done
			break
			;;
		-s|script)
			echo '#!/bin/bash'
			echo '# this script will setup a bash plugin configuration.'
			echo '# generated by: bashctrl script'
			echo '#'
			for event in ${BASH_DIR}/events/* ; do
				[ -f $event ] \
					&& continue
				echo
				echo "# event: `basename ${event}`"
				for plugin in ${event}/* ; do
					plugin=`basename $plugin`
					( [ "$plugin" == "*" ] \
							|| [ $plugin == "README" ] ) \
						&& continue
					echo "bashctrl add ${plugin/??_/} ${plugin/_*/} `basename ${event}`"
				done
			done
			echo
			break
			;;
		add)
			if [[ $# < 4 ]] ; then
				echo "$SCRIPT: Error: wrong argument format."
				exit 1
			fi
			file=${BASH_DIR}/events/${4}/${3}_${2}
			# remove old version if it exists...
			plugin=${BASH_DIR}/plugins/${2}
			if [ -r $plugin ]; then
				evt=`echo ${BASH_DIR}/events/${4}/*_${2}`
				for p in $evt; do
					if [ $p == $evt ] && ! [ -e $p ]; then
						break
					fi
					rm $p
				done
				ln -s $plugin $file
			else
				echo "$SCRIPT: Error: plugin \"$2\" does not exist or is not readable."
			fi
			break
			;;
		del|delete)
			# remove all...
			if [ ${3} = all ] || [ ${3} = '' ] ; then
				files=`echo ${BASH_DIR}/events/*/*_${2}`
				echo "rmoving \"$files\"..."
				rm $files
			# remove one...
			else
				files=`echo ${BASH_DIR}/events/${3}/*_${2}`
				echo "rmoving \"$files\"..."
				rm $files
			fi
			break
			;;
		run)
			if [ -z $2 ] ; then
				echo 'bashctrl: no EVENT given.' >&2
				exit 1
			fi
			for plugin in ${BASH_DIR}/events/$2/* ; do
				[ $plugin == "README" ] \
					&& continue
				source $plugin $2
			done
			shift
			break
			;;
		setup)
			# dirs...
			mkdir -p \
				${BASH_DIR}/{commands,dat,local,plugins}/ \
				${BASH_DIR}/events/{start,login,logout,end}/ \
				${BIN_DIR}/
			# script...
			cp $0 ${BASH_DIR}/
			ln -sf ${BASH_DIR}/$0 ~/bin/bashctrl
			# plugins...
			for plugin in "${DEFAULT_PLUGINS[@]}" ; do
				bashctrl add $plugin
			done
			break
			;;
		# XXX
		##update)
		##	break
		##	;;
	esac
	shift
done



#----------------------------------------------------------------------
# vim:set ts=4 sw=4 nowrap spell :
