#!/bin/bash

SCRIPT=`basename $0`
ORIGPATH=`pwd`

printhelp () {
	echo 'Bash Control script'
	echo 'format:'
	echo '	bashctrl COMMAND [ARGS]'
	echo
	echo 'supported commands:'
	echo '  help		- print this message.'
	echo '  list		- list events and installed plugins.'
	echo '  script	- list the plugins in a runnable bash script format.'
	echo '  plugins	- list available plugins.'
	echo '  events	- list supported events.'
	echo '  add PLUGIN PRIO EVT'
	echo '		- install PLUGIN to EVT with PRIO.'
	echo '		  if a plugin is already installed, change its settings.'
	echo '		  NOTE: use a two digit priority (arbitary digit prios'
	echo '		        are not supported by some commands).'
	echo '  del PLUGIN EVT|all'
	echo '		- remove PLUGIN from EVT.'
	echo '		  if "all" is given, remove from all events.'
	# XXX
	#echo '  setup	- setup bashctrl directories.'
	#echo '  update	- update pligins'
	#echo '  run EVENT'
	#echo '		- run event scripts'
	echo
	echo 'other commands:'
	echo '  drop-all-plugin-bindings'
	echo '		- removes all installed plugin bindings.'
}

if [ -z $1 ]; then
	printhelp
	exit	
fi

cd ~/.bash/

while true; do
	if [ -z $1 ]; then
		break
	fi
	case $1 in
		-h|--help|help)
			printhelp
			break
			;;
		--add-plugin|add)
			if [[ $# < 4 ]] ; then
				echo "$SCRIPT: Error: wrong argument format."
				exit 1
			fi
			# TODO check if such a plugin exists...
			file=events/${4}/${3}_${2}
			# remove old version if it exists...
			# TODO make this silent...
			plugin=plugins/${2}
			if [ -r $plugin ]; then
				evt=`echo events/${4}/*_${2}`
				for p in $evt; do
					if [ $p == $evt ] && ! [ -e $p ]; then
						break
					fi
					rm $p
				done
				# TODO test this...
				ln -s ../../$plugin $file
			else
				echo "$SCRIPT: Error: plugin \"$2\" does not exist or is not readable."
			fi
			break
			;;

		--del-plugins|del)
			if [ ${3} = all ] || [ ${3} = '' ] ; then
				files=`echo events/*/*_${2}`
				echo "rmoving \"$files\"..."
				rm $files
			else
				files=`echo events/${3}/*_${2}`
				echo "rmoving \"$files\"..."
				rm $files
			fi
			break
			;;

		--events|events)
			echo supported events:
			for event in events/* ; do
				if [ $event = "events/run" ]; then
					continue
				fi
				echo "    ${event/events\//}"
				if [ -e ${event}/DOC ] ; then
					cat ${event}/DOC
					echo
				fi
			done
			break
			;;

		--list|list)
			echo installed plugins:
			for event in events/* ; do
				if [ $event = "events/run" ]; then
					continue
				fi
				echo "    ${event/events\//}"
				for plugin in ${event}/* ; do
					plugin=`basename $plugin`
					if [[ $plugin == 'DOC' ]] ; then
						continue
					fi
					echo "        $plugin"
				done
			done
			break
			;;

		--script|script)
			echo '#!/bin/bash'
			echo '# this script will setup a bash plugin configuration.'
			echo '# generated by: bashctrl script'
			echo '#'
			echo '# if you want to do a clean install uncomment the next line...'
			echo '##bashctrl drop-all-plugin-bindings'
			for event in events/* ; do
				if [ $event = "events/run" ]; then
					continue
				fi
				echo
				echo "# event: ${event/events\//}"
				for plugin in ${event}/* ; do
					plugin=`basename $plugin`
					if [[ $plugin == 'DOC' ]] ; then
						continue
					fi
					echo "bashctrl add ${plugin/??_/} ${plugin/_*/} ${event/events\//}"
				done
			done
			echo
			break
			;;

		--drop-all-plugin-bindings|drop-all-plugin-bindings)
			read -p "are you sure you want to remove all current bash plugin bindings? (yes/No) " ans
			if [[ $ans == 'yes' ]] ; then
				rm -f ~/.bash/events/*/*
			else
				echo "not doing anything..."
			fi
			break
			;;


		--list-plugins|plugins)
			echo available plugins:
			for plugin in plugins/* ; do
				plugin=`basename $plugin`
				if [ $plugin = "README" ]; then
					continue
				fi
				echo "    ${plugin}"
			done
			break
			;;


		setup)
			mkdir -p \
				~/.bash/{commands,dat,local,plugins}/ \
				~/.bash/events/{start,login,logout,end}/
			break
			;;


		update)
			break
			;;


		run)
			if [ -z $2 ] ; then
				echo 'bashctrl: no EVENT given.' >&2
				exit 1
			fi
			for plugin in events/$2/* ; do
				source $plugin $2
			done
			break
			;;
	esac
	shift
done

cd $ORIGPATH
